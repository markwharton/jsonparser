# Makefile for JSON



#================================================================
# Setting Variables
#================================================================


# Generic settings
SHELL = @SHELL@

# Package information
PACKAGE = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@
PACKAGEDIR = $(PACKAGE)-$(VERSION)
PACKAGETGZ = $(PACKAGE)-$(VERSION).tar.gz
LIBVER = @MYLIBVER@
LIBREV = @MYLIBREV@
FORMATVER = @MYFORMATVER@

# Targets
HEADERFILES = @MYHEADERFILES@
LIBRARYFILES = @MYLIBRARYFILES@
LIBOBJFILES = @MYLIBOBJFILES@
COMMANDFILES = @MYCOMMANDFILES@
CGIFILES = @MYCGIFILES@
MAN1FILES = @MYMAN1FILES@
MAN3FILES = @MYMAN3FILES@
DOCUMENTFILES = @MYDOCUMENTFILES@
PCFILES = @MYPCFILES@

# Install destinations
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
INCLUDEDIR = @includedir@
LIBDIR = @libdir@
BINDIR = @bindir@
LIBEXECDIR = @libexecdir@
DATADIR = @datadir@/$(PACKAGE)
MAN1DIR = @mandir@/man1
MAN3DIR = @mandir@/man3
PCDIR = @libdir@/pkgconfig
DESTDIR =

# Building configuration
CC = @CC@
CPPFLAGS = @MYCPPFLAGS@ \
  -D_JSON_PREFIX="\"$(prefix)\"" -D_JSON_INCLUDEDIR="\"$(INCLUDEDIR)\"" \
  -D_JSON_LIBDIR="\"$(LIBDIR)\"" -D_JSON_BINDIR="\"$(BINDIR)\"" -D_JSON_LIBEXECDIR="\"$(LIBEXECDIR)\"" \
  -D_JSON_APPINC="\"-I$(INCLUDEDIR)\"" -D_JSON_APPLIBS="\"-L$(LIBDIR) -ljsonparser @LIBS@\""
CFLAGS = @MYCFLAGS@
LDFLAGS = @MYLDFLAGS@
CMDLDFLAGS = @MYCMDLDFLAGS@
LIBS = @LIBS@
LDENV = LD_RUN_PATH=/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@:.
RUNENV = @MYLDLIBPATHENV@=.:/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@
POSTCMD = @MYPOSTCMD@
RAGEL = @MYRAGEL@
RAGELFLAGS = @MYRAGELFLAGS@



#================================================================
# Suffix rules
#================================================================


%.o: %.c
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

%.c: %.rl
	$(RAGEL) $(RAGELFLAGS) -o $@ $<


#================================================================
# Actions
#================================================================


all : $(LIBRARYFILES) $(COMMANDFILES) $(CGIFILES)
	@$(POSTCMD)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Ready to install.\n'
	@printf '#================================================================\n'


clean :
	rm -rf $(LIBRARYFILES) $(LIBOBJFILES) $(COMMANDFILES) $(CGIFILES) \
	  *.o a.out jsonparser.c jsonparser_all.c


version :
	vernum=`expr $(LIBVER)00 + $(LIBREV)` ; \
	  sed -e 's/_JSON_VERSION.*/_JSON_VERSION    "$(VERSION)"/' \
	    -e "s/_JSON_LIBVER.*/_JSON_LIBVER     $$vernum/" \
	    -e 's/_JSON_FORMATVER.*/_JSON_FORMATVER  "$(FORMATVER)"/' jsonparser.h > jsonparser.h~
	[ -f jsonparser.h~ ] && mv -f jsonparser.h~ jsonparser.h


untabify :
	ls *.c *.h *.idl | while read name ; \
	  do \
	    sed -e 's/\t/        /g' -e 's/ *$$//' $$name > $$name~; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
	  done


install :
	mkdir -p $(DESTDIR)$(INCLUDEDIR)
	cp -Rf $(HEADERFILES) $(DESTDIR)$(INCLUDEDIR)
	mkdir -p $(DESTDIR)$(LIBDIR)
	cp -Rf $(LIBRARYFILES) $(DESTDIR)$(LIBDIR)
	mkdir -p $(DESTDIR)$(BINDIR)
	cp -Rf $(COMMANDFILES) $(DESTDIR)$(BINDIR)
#	mkdir -p $(DESTDIR)$(LIBEXECDIR)
#	cp -Rf $(CGIFILES) $(DESTDIR)$(LIBEXECDIR)
#	mkdir -p $(DESTDIR)$(DATADIR)
#	cp -Rf $(DOCUMENTFILES) $(DESTDIR)$(DATADIR)
#	mkdir -p $(DESTDIR)$(MAN1DIR)
#	cd man && cp -Rf $(MAN1FILES) $(DESTDIR)$(MAN1DIR)
#	mkdir -p $(DESTDIR)$(MAN3DIR)
#	cd man && cp -Rf $(MAN3FILES) $(DESTDIR)$(MAN3DIR)
#	mkdir -p $(DESTDIR)$(PCDIR)
#	cp -Rf $(PCFILES) $(DESTDIR)$(PCDIR)
	-[ "$$UID" = 0 ] && PATH=/sbin:/usr/sbin:$(PATH) ldconfig 2>/dev/null || true
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Thanks for using JSON.\n'
	@printf '#================================================================\n'


install-strip :
	make DESTDIR=$(DESTDIR) install
	cd $(DESTDIR)$(BINDIR) && strip $(COMMANDFILES)


uninstall :
	cd $(DESTDIR)$(INCLUDEDIR) && rm -f $(HEADERFILES)
	cd $(DESTDIR)$(LIBDIR) && rm -f $(LIBRARYFILES)
	cd $(DESTDIR)$(BINDIR) && rm -f $(COMMANDFILES)
	cd $(DESTDIR)$(LIBEXECDIR) && rm -f $(CGIFILES)
	cd $(DESTDIR)$(MAN1DIR) && rm -f $(MAN1FILES)
	cd $(DESTDIR)$(MAN3DIR) && rm -f $(MAN3FILES)
	rm -rf $(DESTDIR)$(DATADIR)
	cd $(DESTDIR)$(PCDIR) && rm -f $(PCFILES)
	[ "$$UID" = 0 ] && PATH=/sbin:/usr/sbin:$(PATH) ldconfig 2>/dev/null || true


dist :
	make version
#	make untabify
	make distclean
	cd .. && tar cvf - $(PACKAGEDIR) | gzip -c > $(PACKAGETGZ)
	sync ; sync


distclean : clean
#	cd example && make clean
#	cd bros && make clean
	rm -rf Makefile jsonparser.pc config.cache config.h config.log config.status configure.scan \
		autom4te.cache autoscan.log creole1.0test.html nyctergatis.html readme.html json.html


check :
	make check-html
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Checking complete.\n'
	@printf '#================================================================\n'


check-html :
	$(RUNENV) $(RUNCMD) ./json -b 1024 < sample.json


check-valgrind :
	make RUNCMD="valgrind --tool=memcheck --log-file=%p.vlog" check
	grep ERROR *.vlog | grep -v ' 0 errors' ; true
	grep 'at exit' *.vlog | grep -v ' 0 bytes' ; true


.PHONY : all clean install check



#================================================================
# Building binaries
#================================================================


libjsonparser.a : $(LIBOBJFILES)
	$(AR) $(ARFLAGS) $@ $(LIBOBJFILES)


libjsonparser.so.$(LIBVER).$(LIBREV).0 : $(LIBOBJFILES)
	if uname -a | egrep -i 'SunOS' > /dev/null ; \
	  then \
	    $(CC) $(CFLAGS) -shared -Wl,-G,-h,libjsonparser.so.$(LIBVER) -o $@ \
	      $(LIBOBJFILES) $(LDFLAGS) $(LIBS) ; \
	  else \
	    $(CC) $(CFLAGS) -shared -Wl,-soname,libjsonparser.so.$(LIBVER) -o $@ \
	      $(LIBOBJFILES) $(LDFLAGS) $(LIBS) ; \
	  fi


libjsonparser.so.$(LIBVER) : libjsonparser.so.$(LIBVER).$(LIBREV).0
	ln -f -s libjsonparser.so.$(LIBVER).$(LIBREV).0 $@


libjsonparser.so : libjsonparser.so.$(LIBVER).$(LIBREV).0
	ln -f -s libjsonparser.so.$(LIBVER).$(LIBREV).0 $@


libjsonparser.$(LIBVER).$(LIBREV).0.dylib : $(LIBOBJFILES)
	$(CC) $(CFLAGS) -dynamiclib -o $@ \
	  -install_name $(LIBDIR)/libjsonparser.$(LIBVER).dylib \
	  -current_version $(LIBVER).$(LIBREV).0 -compatibility_version $(LIBVER) \
	  $(LIBOBJFILES) $(LDFLAGS) $(LIBS)


libjsonparser.$(LIBVER).dylib : libjsonparser.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libjsonparser.$(LIBVER).$(LIBREV).0.dylib $@


libjsonparser.dylib : libjsonparser.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libjsonparser.$(LIBVER).$(LIBREV).0.dylib $@


json : json.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) -ljsonparser $(LIBS)


jsonparser.o : config.h jsonparser.h

json.o : config.h jsonparser.h



jsonparser_all.c : jsonparser.c > $@

jsonparser_all.o : config.h jsonparser.h



# END OF FILE
